// src/App.tsx
import React, { useEffect, useMemo, useRef, useState } from "react";

/* ============================== Types ============================== */
interface Ring {
  row: number;
  col: number;
  x: number;      // world coords
  y: number;      // world coords
  radius: number; // world units
  color?: string; // custom color if painted
  supplier?: "cmj" | "trl";
}
type ColorMode = "solid" | "checker";
type Unit = "mm" | "in";
type ImageScalingMode = "fit" | "fill" | "stretch";

interface Params {
  rows: number;
  cols: number;
  innerDiameter: number; // mm
  wireDiameter: number;  // mm (stroke baseline)
  overlapX: number;      // 0..1
  overlapY: number;      // 0..1
  colorMode: ColorMode;
  ringColor: string;
  altColor: string;
  bgColor: string;
  supplier: "cmj" | "trl";
  ringSpec: string;
  unit: Unit;
}

/* ============================== Data ============================== */
const SUPPLIERS = [
  { id: "cmj", name: "Chainmail Joe" },
  { id: "trl", name: "The Ring Lord" },
];

const RING_SPECS = [
  { label: '1/4" 16swg AR~4.0', inner: 6.35, wire: 1.6 },
  { label: '5/16" 16swg AR~5.0', inner: 7.94, wire: 1.6 },
  { label: '3/8" 16swg AR~6.2', inner: 9.53, wire: 1.6 },
  { label: '1/4" 18swg AR~4.4', inner: 6.35, wire: 1.2 },
  { label: '5/16" 18swg AR~6.1', inner: 7.94, wire: 1.2 },
];

const DEFAULTS: Params = {
  rows: 20,
  cols: 20,
  innerDiameter: 6.35,
  wireDiameter: 1.6,
  overlapX: 0.30,
  overlapY: 0.15,
  colorMode: "solid",
  ringColor: "#b8c2cc",
  altColor: "#94a3b8",
  bgColor: "#0b0f14",
  supplier: "cmj",
  ringSpec: '1/4" 16swg AR~4.0',
  unit: "mm",
};

// Fixed pack size: 1800 rings/pack
const FIXED_PACK_SIZE = 1800;

/* ============================== Supplier Palettes ============================== */
const SUPPLIER_COLORS: Record<
  Params["supplier"],
  {
    supplier: "cmj" | "trl";
    name: string;
    hex: string;
  }[]
> = {
  cmj: [
    { supplier: "cmj", name: "Bright Aluminum", hex: "#C0C0C0" },
    { supplier: "cmj", name: "Black",           hex: "#000000" },
    { supplier: "cmj", name: "Gold",            hex: "#FFD700" },
    { supplier: "cmj", name: "Silver",          hex: "#B8B8B8" },
    { supplier: "cmj", name: "Red",             hex: "#FF0000" },
    { supplier: "cmj", name: "Blue",            hex: "#0A58FF" },
    { supplier: "cmj", name: "Kelly Green",     hex: "#4CBB17" },
    { supplier: "cmj", name: "OD Green",        hex: "#556B2F" },
    { supplier: "cmj", name: "Violet",          hex: "#8F00FF" },
    { supplier: "cmj", name: "Cosmic Pink",     hex: "#FF1493" },
    { supplier: "cmj", name: "Stormy Gray",     hex: "#708090" },
    { supplier: "cmj", name: "Orange",          hex: "#FF8C00" },
    { supplier: "cmj", name: "Turquoise",       hex: "#40E0D0" },
    { supplier: "cmj", name: "Teal",            hex: "#008080" },
    { supplier: "cmj", name: "Bronze",          hex: "#CD7F32" },
    { supplier: "cmj", name: "Copper",          hex: "#B87333" },
    { supplier: "cmj", name: "Champagne",       hex: "#E6C79C" },
    { supplier: "cmj", name: "Rose Gold",       hex: "#B76E79" },
    { supplier: "cmj", name: "Lime",            hex: "#BFFF00" },
    { supplier: "cmj", name: "Yellow",          hex: "#FFFF00" },
    { supplier: "cmj", name: "Magenta",         hex: "#FF00FF" },
    { supplier: "cmj", name: "Purple",          hex: "#800080" },
    { supplier: "cmj", name: "Navy",            hex: "#001F54" },
    { supplier: "cmj", name: "Sky Blue",        hex: "#87CEEB" },
    { supplier: "cmj", name: "Aqua",            hex: "#00FFFF" },
    { supplier: "cmj", name: "Mint",            hex: "#98FF98" },
    { supplier: "cmj", name: "Dark Red",        hex: "#8B0000" },
    { supplier: "cmj", name: "Maroon",          hex: "#800000" },
    { supplier: "cmj", name: "Charcoal",        hex: "#36454F" },
    { supplier: "cmj", name: "Gunmetal",        hex: "#2A3439" },
  ],
  trl: [
    { supplier: "trl", name: "Black Ice",       hex: "#1D1F2B" },
    { supplier: "trl", name: "Frost",           hex: "#D4D4D4" },
    { supplier: "trl", name: "Dark Rose",       hex: "#A05056" },
    { supplier: "trl", name: "Lime",            hex: "#BFFF00" },
    { supplier: "trl", name: "Orange",          hex: "#FFA500" },
    { supplier: "trl", name: "Yellow",          hex: "#FFFF00" },
    { supplier: "trl", name: "Green",           hex: "#008000" },
    { supplier: "trl", name: "Purple",          hex: "#800080" },
    { supplier: "trl", name: "Blue",            hex: "#0000FF" },
    { supplier: "trl", name: "Silver",          hex: "#C0C0C0" },
    { supplier: "trl", name: "Copper",          hex: "#B87333" },
    { supplier: "trl", name: "Bronze",          hex: "#CD7F32" },
    { supplier: "trl", name: "Teal",            hex: "#008080" },
    { supplier: "trl", name: "Turquoise",       hex: "#40E0D0" },
    { supplier: "trl", name: "Pink",            hex: "#FF69B4" },
    { supplier: "trl", name: "Royal Blue",      hex: "#4169E1" },
    { supplier: "trl", name: "Sea Green",       hex: "#2E8B57" },
    { supplier: "trl", name: "Graphite",        hex: "#3B3B3B" },
    { supplier: "trl", name: "Steel",           hex: "#7A7A7A" },
    { supplier: "trl", name: "Champagne",       hex: "#E6C79C" },
  ],
};

// label resolver
function supplierColorName(s: Params["supplier"], hex: string): string {
  const entry = SUPPLIER_COLORS[s].find(c => c.hex.toUpperCase() === hex.toUpperCase());
  return entry?.name ?? hex;
}

/* ============================== Math & Color Helpers ============================== */
const clamp = (v: number, a: number, b: number) => Math.max(a, Math.min(b, v));

function pitches(p: Params) {
  const pitchX = p.innerDiameter * (1 - p.overlapX);
  const pitchY = (p.innerDiameter + p.wireDiameter) * (1 - p.overlapY);
  return { pitchX, pitchY };
}
function worldSize(p: Params) {
  const { pitchX, pitchY } = pitches(p);
  const width = (p.cols - 1) * pitchX + p.innerDiameter;
  const height = (p.rows - 1) * pitchY + p.innerDiameter;
  return { width, height };
}
function generateRings(p: Params): Ring[] {
  const { pitchX, pitchY } = pitches(p);
  const r = p.innerDiameter / 2;
  const rings: Ring[] = [];
  for (let row = 0; row < p.rows; row++) {
    for (let col = 0; col < p.cols; col++) {
      const x = col * pitchX + (row % 2) * (pitchX / 2);
      const y = row * pitchY;
      rings.push({ row, col, x, y, radius: r });
    }
  }
  return rings;
}
// preserve painted colors when geometry changes
function syncRings(p: Params, prev: Ring[]): Ring[] {
  const base = generateRings(p);
  if (!prev.length) return base;
  const colorMap = new Map<string, { color?: string; supplier?: Ring["supplier"] }>();
  for (const r of prev) colorMap.set(`${r.row}:${r.col}`, { color: r.color, supplier: r.supplier });
  return base.map((r) => {
    const prevState = colorMap.get(`${r.row}:${r.col}`);
    return { ...r, color: prevState?.color, supplier: prevState?.supplier };
  });
}

// hex & distances
function hexToRgb(hex: string) {
  const h = hex.replace("#", "");
  const n = parseInt(h, 16);
  return { r: (n >> 16) & 255, g: (n >> 8) & 255, b: n & 255 };
}
function colorDistance(a: { r: number; g: number; b: number }, b: { r: number; g: number; b: number }) {
  const dr = a.r - b.r, dg = a.g - b.g, db = a.b - b.b;
  return Math.sqrt(dr * dr + dg * dg + db * db);
}
// nearest across BOTH suppliers
function nearestSupplierColorBoth(rgb: { r: number; g: number; b: number }) {
  let best = { hex: "#000000", supplierId: "cmj" as "cmj" | "trl", name: "", dist: Number.POSITIVE_INFINITY };
  for (const supplierId of ["cmj", "trl"] as const) {
    for (const c of SUPPLIER_COLORS[supplierId]) {
      const d = colorDistance(rgb, hexToRgb(c.hex));
      if (d < best.dist) best = { hex: c.hex, supplierId, name: c.name, dist: d };
    }
  }
  return best;
}
// draw rect for image scaling
function computeDrawRect(
  imgW: number,
  imgH: number,
  targetW: number,
  targetH: number,
  mode: ImageScalingMode
) {
  if (mode === "stretch") {
    return { sx: 0, sy: 0, sw: imgW, sh: imgH, dx: 0, dy: 0, dw: targetW, dh: targetH };
  }
  const imgAR = imgW / imgH;
  const targetAR = targetW / targetH;
  if (mode === "fit") {
    let dw = targetW, dh = Math.round(targetW / imgAR);
    if (dh > targetH) { dh = targetH; dw = Math.round(targetH * imgAR); }
    const dx = Math.floor((targetW - dw) / 2);
    const dy = Math.floor((targetH - dh) / 2);
    return { sx: 0, sy: 0, sw: imgW, sh: imgH, dx, dy, dw, dh };
  }
  // fill
  let dw = targetW, dh = Math.round(targetW / imgAR);
  if (dh < targetH) { dh = targetH; dw = Math.round(targetH * imgAR); }
  const dx = Math.floor((targetW - dw) / 2);
  const dy = Math.floor((targetH - dh) / 2);
  return { sx: 0, sy: 0, sw: imgW, sh: imgH, dx, dy, dw, dh };
}

/* ============================== Component ============================== */
export default function App() {
  // params + rings
  const [params, setParams] = useState<Params>(DEFAULTS);
  const [rings, setRings] = useState<Ring[]>([]);
  const [selectedRing, setSelectedRing] = useState<Ring | null>(null);

  // tools
  const [paintMode, setPaintMode] = useState(false);
  const [eraserMode, setEraserMode] = useState(false);
  const [isPainting, setIsPainting] = useState(false);
  const [currentBrushColor, setCurrentBrushColor] = useState("#ffffff");
  const [customColor, setCustomColor] = useState("#ffffff");

  // viewport
  const [scale, setScale] = useState(1);
  const [offset, setOffset] = useState({ x: 40, y: 40 });
  const [isPanning, setIsPanning] = useState(false);
  const panStart = useRef<{ x: number; y: number } | null>(null);

  // pagination
  const [page, setPage] = useState(0);
  const pageSize = 200;

  // refs
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const wrapRef = useRef<HTMLDivElement>(null);

  // image scaling
  const [imgScaleMode, setImgScaleMode] = useState<ImageScalingMode>("fit");
  const [imageLoading, setImageLoading] = useState(false);

  // undo/redo history
  const [historyPast, setHistoryPast] = useState<Ring[][]>([]);
  const [historyFuture, setHistoryFuture] = useState<Ring[][]>([]);
  const HISTORY_LIMIT = 50;

  // preview modal
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState<HTMLImageElement | null>(null);
  const [previewScale, setPreviewScale] = useState<ImageScalingMode>("fit");
  const previewCanvasRef = useRef<HTMLCanvasElement>(null);

  /* ---------- Build/sync rings ---------- */
  useEffect(() => {
    setRings((prev) => syncRings(params, prev));
  }, [
    params.rows,
    params.cols,
    params.innerDiameter,
    params.wireDiameter,
    params.overlapX,
    params.overlapY,
  ]);

  /* ---------- Canvas sizing + render ---------- */
  const { worldW, worldH, pad } = useMemo(() => {
    const { width, height } = worldSize(params);
    const pad = Math.max(40, params.innerDiameter * 2);
    return { worldW: width, worldH: height, pad };
  }, [params]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const dpr = window.devicePixelRatio || 1;
    const cssW = Math.ceil(worldW + pad * 2);
    const cssH = Math.ceil(worldH + pad * 2);
    canvas.width = Math.max(1, Math.floor(cssW * dpr));
    canvas.height = Math.max(1, Math.floor(cssH * dpr));

    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    draw(ctx, cssW, cssH);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [params, rings, selectedRing, scale, offset, worldW, worldH, pad]);

  /* ---------- Color logic ---------- */
  function ringColorFallback(r: Ring): string {
    if (r.color) return r.color;
    if (params.colorMode === "checker" && (r.row + r.col) % 2 === 1)
      return params.altColor;
    return params.ringColor;
  }

  /* ---------- Drawing ---------- */
  function draw(ctx: CanvasRenderingContext2D, cssW: number, cssH: number) {
    ctx.save();
    ctx.clearRect(0, 0, cssW, cssH);

    // background
    ctx.fillStyle = params.bgColor;
    ctx.fillRect(0, 0, cssW, cssH);

    // world transform
    ctx.translate(offset.x + pad, offset.y + pad);
    ctx.scale(scale, scale);

    // bounds (subtle)
    ctx.fillStyle = "rgba(255,255,255,0.02)";
    ctx.fillRect(
      -params.innerDiameter,
      -params.innerDiameter,
      worldW + params.innerDiameter * 2,
      worldH + params.innerDiameter * 2
    );

    // rings
    for (const r of rings) {
      ctx.strokeStyle = ringColorFallback(r);
      ctx.lineWidth = params.wireDiameter / scale; // why: keep width visually constant
      ctx.beginPath();
      ctx.arc(r.x, r.y, r.radius, 0, Math.PI * 2);
      ctx.stroke();
    }

    // selection outline
    if (selectedRing) {
      const s = selectedRing;
      ctx.strokeStyle = "#ffffff";
      ctx.lineWidth = 2 / scale;
      ctx.beginPath();
      ctx.arc(s.x, s.y, s.radius + 3 / scale, 0, Math.PI * 2);
      ctx.stroke();
    }

    ctx.restore();
  }

  /* ---------- Coords ---------- */
  function screenToWorld(clientX: number, clientY: number) {
    const canvas = canvasRef.current!;
    const rect = canvas.getBoundingClientRect();
    const sx = clientX - rect.left - pad;
    const sy = clientY - rect.top - pad;
    return { x: (sx - offset.x) / scale, y: (sy - offset.y) / scale };
  }

  /* ---------- History ---------- */
  function pushHistory(snapshot?: Ring[]) {
    const snap = snapshot ?? rings.map(r => ({ ...r }));
    setHistoryPast((prev) => {
      const next = [...prev, snap];
      if (next.length > HISTORY_LIMIT) next.shift();
      return next;
    });
    setHistoryFuture([]); // invalidate redo
  }
  function undo() {
    setHistoryPast((prev) => {
      if (!prev.length) return prev;
      setHistoryFuture((fut) => [rings.map(r => ({ ...r })), ...fut]);
      const last = prev[prev.length - 1];
      setRings(last.map(r => ({ ...r })));
      return prev.slice(0, -1);
    });
  }
  function redo() {
    setHistoryFuture((prev) => {
      if (!prev.length) return prev;
      setHistoryPast((pst) => [...pst, rings.map(r => ({ ...r }))]);
      const first = prev[0];
      setRings(first.map(r => ({ ...r })));
      return prev.slice(1);
    });
  }

  /* ---------- Interactions ---------- */
  // zoom (cursor-centered)
  function onWheel(e: React.WheelEvent) {
    e.preventDefault();
    const factor = e.deltaY < 0 ? 1.1 : 0.9;
    const newScale = clamp(scale * factor, 0.1, 20);

    // cursor anchoring
    const canvas = canvasRef.current!;
    const rect = canvas.getBoundingClientRect();
    const mx = e.clientX - rect.left - pad;
    const my = e.clientY - rect.top - pad;
    const wx = (mx - offset.x) / scale;
    const wy = (my - offset.y) / scale;
    const nx = wx * newScale + offset.x;
    const ny = wy * newScale + offset.y;
    setOffset({ x: offset.x + (mx - nx), y: offset.y + (my - ny) });
    setScale(newScale);
  }

  function onMouseDown(e: React.MouseEvent<HTMLCanvasElement>) {
    if (paintMode || eraserMode) {
      pushHistory(); // why: start of a paint stroke
      setIsPainting(true);
      const { x, y } = screenToWorld(e.clientX, e.clientY);
      paintAt(x, y);
      return;
    }
    setIsPanning(true);
    panStart.current = { x: e.clientX - offset.x, y: e.clientY - offset.y };
  }
  function onMouseMove(e: React.MouseEvent<HTMLCanvasElement>) {
    if (isPainting && (paintMode || eraserMode)) {
      const { x, y } = screenToWorld(e.clientX, e.clientY);
      paintAt(x, y);
      return;
    }
    if (!isPanning || !panStart.current) return;
    setOffset({ x: e.clientX - panStart.current.x, y: e.clientY - panStart.current.y });
  }
  function onMouseUp() {
    setIsPainting(false);
    setIsPanning(false);
    panStart.current = null;
  }
  function onClick(e: React.MouseEvent<HTMLCanvasElement>) {
    if (paintMode || eraserMode) return;
    const { x, y } = screenToWorld(e.clientX, e.clientY);
    setSelectedRing(hitTest(x, y));
  }

  function hitTest(wx: number, wy: number): Ring | null {
    for (const r of rings) {
      const dx = wx - r.x;
      const dy = wy - r.y;
      if (dx * dx + dy * dy <= (r.radius + 3) * (r.radius + 3)) return r;
    }
    return null;
  }

  function paintAt(wx: number, wy: number) {
    const color = eraserMode ? undefined : currentBrushColor;
    const sup: Ring["supplier"] | undefined = eraserMode ? undefined : params.supplier; // stamp supplier for manual paint
    setRings((prev) =>
      prev.map((r) => {
        const dx = wx - r.x, dy = wy - r.y;
        if (dx * dx + dy * dy <= (r.radius + 3) * (r.radius + 3)) {
          return { ...r, color, supplier: sup };
        }
        return r;
      })
    );
  }

  function assignColorToSelected(color: string) {
    if (!selectedRing) return;
    pushHistory();
    setRings((prev) =>
      prev.map((r) =>
        r.row === selectedRing.row && r.col === selectedRing.col
          ? { ...r, color, supplier: params.supplier }
          : r
      )
    );
  }
  function assignColorToAll(color: string) {
    pushHistory();
    setRings((prev) => prev.map((r) => ({ ...r, color, supplier: params.supplier })));
  }
  function clearAllColors() {
    pushHistory();
    setRings((prev) => prev.map((r) => ({ ...r, color: undefined, supplier: undefined })));
  }

  /* ---------- View helpers ---------- */
  function fitToView() {
    const wrap = wrapRef.current!;
    const vw = wrap.clientWidth - 16;
    const vh = wrap.clientHeight - 16;
    const s = clamp(Math.min(vw / (worldW + pad * 2), vh / (worldH + pad * 2)), 0.05, 20);
    setScale(s);
    setOffset({
      x: (vw - (worldW + pad * 2) * s) / 2 + pad * (1 - s),
      y: (vh - (worldH + pad * 2) * s) / 2 + pad * (1 - s),
    });
  }
  function centerView() {
    const wrap = wrapRef.current!;
    const vw = wrap.clientWidth;
    const vh = wrap.clientHeight;
    setOffset({
      x: vw / 2 - (worldW / 2) * scale - pad,
      y: vh / 2 - (worldH / 2) * scale - pad,
    });
  }
  function oneToOne() {
    setScale(1);
    centerView();
  }
  function goToRing(row: number, col: number, targetScale?: number) {
    const { pitchX, pitchY } = pitches(params);
    const rx = col * pitchX + (row % 2) * (pitchX / 2);
    const ry = row * pitchY;
    const wrap = wrapRef.current!;
    const vw = wrap.clientWidth;
    const vh = wrap.clientHeight;
    const s = clamp(targetScale ?? clamp(scale, 0.2, 6), 0.05, 20);
    setScale(s);
    setOffset({ x: vw / 2 - rx * s - pad, y: vh / 2 - ry * s - pad });
    const ring = rings.find((r) => r.row === row && r.col === col);
    setSelectedRing(ring ?? null);
  }

  /* ---------- Pagination ---------- */
  const total = rings.length;
  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  const safePage = clamp(page, 0, totalPages - 1);
  const slice = rings.slice(
    safePage * pageSize,
    safePage * pageSize + pageSize
  );

  /* ---------- Spec parsing ---------- */
  function parseSpec(label: string) {
    const id = (label.match(/^[^ ]+/)?.[0] ?? "").replace(/"/g, "");
    const swg = (label.match(/\s(\d+swg)/i)?.[1] ?? "").toLowerCase();
    const ar = (label.match(/AR~([\d.]+)/i)?.[1] ?? "");
    return { id: id ? `${id}"` : "", swg, ar };
  }
  const specParsed = useMemo(() => parseSpec(params.ringSpec), [params.ringSpec]);

  /* ---------- Usage / BOM ---------- */
  const usageRows = useMemo(() => {
    const counts = new Map<string, { supplier: Ring["supplier"] | undefined; hex: string; count: number }>();
    for (const r of rings) {
      const hex = ringColorFallback(r).toUpperCase();
      const sup = r.color ? (r.supplier ?? params.supplier) : undefined;
      const key = `${sup ?? "unassigned"}|${hex}`;
      const prev = counts.get(key);
      if (prev) prev.count += 1;
      else counts.set(key, { supplier: sup, hex, count: 1 });
    }
    const rows = Array.from(counts.values()).map(({ supplier, hex, count }) => {
      const s: Params["supplier"] = supplier ?? params.supplier;
      const supplierName = SUPPLIERS.find(x => x.id === s)?.name ?? "Unknown";
      const label = supplierColorName(s, hex);
      const packSize = FIXED_PACK_SIZE;
      const packs = Math.ceil(count / packSize);
      return {
        supplier: supplierName,
        supplierId: s,
        name: label,
        hex,
        count,
        packs,
        packSize,
        swg: specParsed.swg,
        id: specParsed.id,
        ar: specParsed.ar,
      };
    });
    rows.sort((a, b) => a.supplier.localeCompare(b.supplier) || b.count - a.count);
    return rows;
  }, [rings, params.supplier, params.ringSpec, params.colorMode, params.ringColor, params.altColor, specParsed]);

  const totalPacks = useMemo(
    () => usageRows.reduce((acc, r) => acc + r.packs, 0),
    [usageRows]
  );

  /* ---------- Image Import (Preview) ---------- */
  function onImagePick(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;
    const img = new Image();
    img.src = URL.createObjectURL(file);
    img.onload = () => {
      setPreviewImage(img);
      setPreviewScale(imgScaleMode); // start with current setting
      setPreviewOpen(true);
    };
  }

  // render preview into preview canvas using current previewScale
  useEffect(() => {
    if (!previewOpen || !previewImage) return;
    const cols = params.cols;
    const rows = params.rows;
    const canvas = previewCanvasRef.current;
    if (!canvas) return;
    canvas.width = cols;
    canvas.height = rows;
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // background for letterbox
    ctx.fillStyle = "#000000";
    ctx.fillRect(0, 0, cols, rows);

    const rect = computeDrawRect(previewImage.width, previewImage.height, cols, rows, previewScale);
    ctx.drawImage(previewImage, rect.sx, rect.sy, rect.sw, rect.sh, rect.dx, rect.dy, rect.dw, rect.dh);
  }, [previewOpen, previewImage, previewScale, params.cols, params.rows]);

  function applyPreviewToRings() {
    if (!previewOpen || !previewImage) return;
    try {
      setImageLoading(true);
      const cols = params.cols;
      const rows = params.rows;

      // read pixels back from preview canvas
      const canvas = previewCanvasRef.current!;
      const ctx = canvas.getContext("2d")!;
      const imgData = ctx.getImageData(0, 0, cols, rows).data;

      // push undo and apply
      pushHistory();
      setRings((prev) =>
        prev.map((r) => {
          const idx = (r.row * cols + r.col) * 4;
          const rgb = { r: imgData[idx], g: imgData[idx + 1], b: imgData[idx + 2] };
          const nearest = nearestSupplierColorBoth(rgb);
          return { ...r, color: nearest.hex, supplier: nearest.supplierId };
        })
      );
    } finally {
      setImageLoading(false);
      setPreviewOpen(false);
      setPreviewImage(null);
    }
  }

  function cancelPreview() {
    setPreviewOpen(false);
    setPreviewImage(null);
  }

  /* ============================== Render ============================== */
  return (
    <div className="h-screen w-screen bg-slate-900 text-slate-100 grid grid-cols-[320px,1fr,320px] grid-rows-[auto,1fr]">
      {/* Top bar */}
      <div className="col-span-3 flex items-center justify-between px-4 py-2 border-b border-slate-800 bg-slate-950/70 backdrop-blur">
        <div className="text-lg font-semibold">Chainmaille Designer • 4-in-1</div>
        <div className="flex items-center gap-2 text-xs">
          <button onClick={fitToView} className="px-2 py-1 rounded bg-slate-800 hover:bg-slate-700">Fit</button>
          <button onClick={centerView} className="px-2 py-1 rounded bg-slate-800 hover:bg-slate-700">Center</button>
          <button onClick={oneToOne} className="px-2 py-1 rounded bg-slate-800 hover:bg-slate-700">1:1</button>
          <div className="px-2 py-1 rounded border border-slate-700 ml-2">Zoom: {scale.toFixed(2)}×</div>

          {/* Undo / Redo */}
          <button onClick={undo} className="ml-2 px-2 py-1 rounded bg-slate-800 hover:bg-slate-700 disabled:opacity-40" disabled={!historyPast.length}>Undo</button>
          <button onClick={redo} className="px-2 py-1 rounded bg-slate-800 hover:bg-slate-700 disabled:opacity-40" disabled={!historyFuture.length}>Redo</button>

          {/* Import Image (opens preview modal) */}
          <label className="ml-2 px-2 py-1 rounded bg-slate-800 hover:bg-slate-700 cursor-pointer">
            Import Image
            <input type="file" accept="image/*" className="hidden" onChange={onImagePick} />
          </label>
          {imageLoading && <span className="ml-2 text-[11px] text-slate-400">processing…</span>}
        </div>
      </div>

      {/* Left panel */}
      <div className="row-span-1 border-r border-slate-800 p-3 overflow-auto">
        <div className="text-xs uppercase tracking-wide text-slate-400 mb-2">Sheet</div>
        <label className="block text-sm">Rows: {params.rows}</label>
        <input
          type="range"
          min={5}
          max={400}
          value={params.rows}
          onChange={(e) => setParams({ ...params, rows: parseInt(e.target.value) })}
          className="w-full mb-3"
        />
        <label className="block text-sm">Columns: {params.cols}</label>
        <input
          type="range"
          min={5}
          max={400}
          value={params.cols}
          onChange={(e) => setParams({ ...params, cols: parseInt(e.target.value) })}
          className="w-full mb-4"
        />

        <div className="text-xs uppercase tracking-wide text-slate-400 mt-2 mb-2">Geometry</div>
        <label className="block text-sm">Inner Ø (mm): {params.innerDiameter.toFixed(2)}</label>
        <input
          type="range"
          min={2}
          max={20}
          step={0.1}
          value={params.innerDiameter}
          onChange={(e) => setParams({ ...params, innerDiameter: parseFloat(e.target.value) })}
          className="w-full mb-3"
        />
        <label className="block text-sm">Wire Ø (mm): {params.wireDiameter.toFixed(2)}</label>
        <input
          type="range"
          min={0.6}
          max={4}
          step={0.1}
          value={params.wireDiameter}
          onChange={(e) => setParams({ ...params, wireDiameter: parseFloat(e.target.value) })}
          className="w-full mb-3"
        />
        <label className="block text-sm">Overlap X: {params.overlapX.toFixed(2)}</label>
        <input
          type="range"
          min={0}
          max={0.8}
          step={0.01}
          value={params.overlapX}
          onChange={(e) => setParams({ ...params, overlapX: parseFloat(e.target.value) })}
          className="w-full mb-3"
        />
        <label className="block text-sm">Overlap Y: {params.overlapY.toFixed(2)}</label>
        <input
          type="range"
          min={0}
          max={0.8}
          step={0.01}
          value={params.overlapY}
          onChange={(e) => setParams({ ...params, overlapY: parseFloat(e.target.value) })}
          className="w-full mb-4"
        />

        <div className="text-xs uppercase tracking-wide text-slate-400 mt-2 mb-2">Supplier</div>
        <label className="block text-sm">Supplier</label>
        <select
          value={params.supplier}
          onChange={(e) => setParams({ ...params, supplier: e.target.value as Params["supplier"] })}
          className="w-full rounded bg-slate-800 p-2 mb-3"
        >
          {SUPPLIERS.map((s) => (
            <option key={s.id} value={s.id}>
              {s.name}
            </option>
          ))}
        </select>

        <label className="block text-sm">Ring Size</label>
        <select
          value={params.ringSpec}
          onChange={(e) => {
            const spec = RING_SPECS.find((r) => r.label === e.target.value);
            if (spec)
              setParams({
                ...params,
                ringSpec: spec.label,
                innerDiameter: spec.inner,
                wireDiameter: spec.wire,
              });
          }}
          className="w-full rounded bg-slate-800 p-2 mb-4"
        >
          {RING_SPECS.map((r) => (
            <option key={r.label} value={r.label}>
              {r.label}
            </option>
          ))}
        </select>

        <div className="text-xs uppercase tracking-wide text-slate-400 mt-2 mb-2">Color Mode</div>
        <select
          value={params.colorMode}
          onChange={(e) => setParams({ ...params, colorMode: e.target.value as ColorMode })}
          className="w-full rounded bg-slate-800 p-2 mb-3"
        >
          <option value="solid">Solid</option>
          <option value="checker">Checker</option>
        </select>

        {/* Image Scaling (persistent) */}
        <div className="text-xs uppercase tracking-wide text-slate-400 mt-3 mb-2">
          Image Scaling
        </div>
        <select
          value={imgScaleMode}
          onChange={(e) => setImgScaleMode(e.target.value as ImageScalingMode)}
          className="w-full rounded bg-slate-800 p-2 mb-3"
        >
          <option value="fit">Fit (letterbox)</option>
          <option value="fill">Fill (crop edges)</option>
          <option value="stretch">Stretch (distort)</option>
        </select>

        <div className="grid grid-cols-2 gap-2">
          <div>
            <div className="text-xs text-slate-300">Primary</div>
            <input
              type="color"
              value={params.ringColor}
              onChange={(e) => setParams({ ...params, ringColor: e.target.value })}
              className="w-full h-8"
            />
          </div>
          <div>
            <div className="text-xs text-slate-300">Alternate</div>
            <input
              type="color"
              value={params.altColor}
              onChange={(e) => setParams({ ...params, altColor: e.target.value })}
              className="w-full h-8"
            />
          </div>
          <div className="col-span-2">
            <div className="text-xs text-slate-300">Background</div>
            <input
              type="color"
              value={params.bgColor}
              onChange={(e) => setParams({ ...params, bgColor: e.target.value })}
              className="w-full h-8"
            />
          </div>
        </div>
      </div>

      {/* Canvas area */}
      <div ref={wrapRef} className="row-span-1 bg-slate-800 overflow-auto relative">
        <canvas
          ref={canvasRef}
          onWheel={onWheel}
          onMouseDown={onMouseDown}
          onMouseMove={onMouseMove}
          onMouseUp={onMouseUp}
          onClick={onClick}
          className={`${
            paintMode || eraserMode
              ? "cursor-crosshair"
              : isPanning
              ? "cursor-grabbing"
              : "cursor-grab"
          }`}
          style={{ width: worldW + pad * 2, height: worldH + pad * 2 }}
        />
        <div className="absolute bottom-2 left-2 text-[10px] text-slate-300 bg-slate-900/60 border border-slate-700 rounded px-2 py-1">
          Wheel: zoom • Drag: pan • Paint/Eraser: toggle on right
        </div>
      </div>

      {/* Right panel */}
      <div className="row-span-1 border-l border-slate-800 p-3 overflow-auto">
        {/* Palette matrix with labels */}
        <div className="text-xs uppercase tracking-wide text-slate-400 mb-2">
          Palette — {SUPPLIERS.find((s) => s.id === params.supplier)?.name}
        </div>
        <div className="grid grid-cols-4 gap-3 mb-3">
          {SUPPLIER_COLORS[params.supplier].map(({ name, hex, supplier }) => (
            <div key={`${supplier}-${name}`} className="flex flex-col items-center text-[10px]">
              <button
                onClick={() => {
                  setCurrentBrushColor(hex);
                  if (!paintMode && !eraserMode) assignColorToSelected(hex);
                }}
                title={`${name} (${hex})`}
                style={{ backgroundColor: hex }}
                className="h-7 w-7 rounded-full border border-white/70"
              />
              <div className="mt-1 text-center leading-tight">{name}</div>
            </div>
          ))}
        </div>

        {/* Custom + apply */}
        <div className="mb-3">
          <input
            type="color"
            value={customColor}
            onChange={(e) => setCustomColor(e.target.value)}
            className="w-full h-10 mb-2"
          />
          <div className="grid grid-cols-2 gap-2">
            <button
              onClick={() => {
                setCurrentBrushColor(customColor);
                if (!paintMode && !eraserMode) assignColorToSelected(customColor);
              }}
              className="px-2 py-1 bg-slate-700 rounded"
            >
              Apply Custom
            </button>
            <button
              onClick={() => assignColorToAll(currentBrushColor)}
              className="px-2 py-1 bg-slate-600 rounded"
            >
              Apply to All
            </button>
            <button
              onClick={clearAllColors}
              className="col-span-2 px-2 py-1 bg-rose-600 rounded"
            >
              Clear All
            </button>
          </div>
        </div>

        {/* Tools */}
        <div className="text-xs uppercase tracking-wide text-slate-400 mb-2">
          Tools
        </div>
        <div className="grid grid-cols-2 gap-2 mb-3">
          <button
            onClick={() => {
              setPaintMode((v) => !v);
              if (eraserMode) setEraserMode(false);
            }}
            className={`px-2 py-1 rounded ${paintMode ? "bg-green-700" : "bg-slate-600"}`}
          >
            {paintMode ? "Paint: ON" : "Paint: OFF"}
          </button>
          <button
            onClick={() => {
              setEraserMode((v) => !v);
              if (paintMode) setPaintMode(false);
            }}
            className={`px-2 py-1 rounded ${eraserMode ? "bg-red-700" : "bg-slate-600"}`}
          >
            {eraserMode ? "Eraser: ON" : "Eraser: OFF"}
          </button>
        </div>

        {/* Go to ring */}
        <div className="text-xs uppercase tracking-wide text-slate-400 mb-2">
          Go to ring
        </div>
        <GotoRingForm rows={params.rows} cols={params.cols} onGo={(r, c) => goToRing(r, c, 4)} />

        {/* Usage (with supplier + spec info) */}
        <div className="text-xs uppercase tracking-wide text-slate-400 mt-4 mb-2">
          Color Usage (packs @ 1800)
        </div>
        <div className="space-y-1 mb-2 text-xs">
          {usageRows.map(({ supplier, name, hex, count, packs, swg, id, ar }) => (
            <div key={`${supplier}-${hex}`} className="flex flex-col bg-slate-800 rounded px-2 py-1">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <span className="inline-block h-3 w-3 rounded-full border" style={{ backgroundColor: hex }} />
                  <span>{supplier} • {name}</span>
                </div>
                <span>{count} rings • {packs} packs</span>
              </div>
              <div className="text-slate-400 text-[10px] pl-6">
                Gauge: {swg || "—"} • ID: {id || "—"} • AR: {ar || "—"}
              </div>
            </div>
          ))}
        </div>
        <div className="text-right text-xs text-slate-300 mb-4">
          Total packs: {totalPacks}
        </div>

        {/* Ring List */}
        <div className="text-xs uppercase tracking-wide text-slate-400 mt-2 mb-2">
          Ring List (page {safePage + 1}/{totalPages})
        </div>
        <div className="flex items-center gap-2 mb-2">
          <button
            onClick={() => setPage((p) => clamp(p - 1, 0, totalPages - 1))}
            className="px-2 py-1 bg-slate-700 rounded"
          >
            Prev
          </button>
          <button
            onClick={() => setPage((p) => clamp(p + 1, 0, totalPages - 1))}
            className="px-2 py-1 bg-slate-700 rounded"
          >
            Next
          </button>
        </div>
        <div className="h-64 overflow-auto text-xs space-y-1">
          {slice.map((r, i) => (
            <div
              key={`${r.row}:${r.col}:${i}`}
              onClick={() => setSelectedRing(r)}
              className={`p-1 rounded cursor-pointer flex items-center justify-between ${
                selectedRing && selectedRing.row === r.row && selectedRing.col === r.col
                  ? "bg-slate-600"
                  : "bg-slate-800"
              }`}
            >
              <span>({r.row},{r.col})</span>
              <span
                className="inline-block h-3 w-3 rounded-full"
                style={{ backgroundColor: ringColorFallback(r) }}
              />
            </div>
          ))}
        </div>
      </div>

      {/* Import Preview Modal */}
      {previewOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/60" onClick={cancelPreview} />
          <div className="relative bg-slate-900 border border-slate-700 rounded-xl p-4 w-[720px] max-w-[95vw] shadow-xl">
            <div className="text-sm font-semibold mb-3">Import Preview</div>
            <div className="grid grid-cols-[1fr,240px] gap-4">
              <div className="bg-slate-800 rounded p-2 flex items-center justify-center">
                <canvas ref={previewCanvasRef} className="border border-slate-700" style={{ imageRendering: "pixelated" }} />
              </div>
              <div>
                <div className="text-xs uppercase tracking-wide text-slate-400 mb-2">Scaling</div>
                <select
                  value={previewScale}
                  onChange={(e) => setPreviewScale(e.target.value as ImageScalingMode)}
                  className="w-full rounded bg-slate-800 p-2 mb-4"
                >
                  <option value="fit">Fit (letterbox)</option>
                  <option value="fill">Fill (crop edges)</option>
                  <option value="stretch">Stretch (distort)</option>
                </select>
                <div className="text-[11px] text-slate-400 mb-4">
                  Mapping uses the closest color across <b>both</b> suppliers. Packs split per supplier automatically.
                </div>
                <div className="flex gap-2">
                  <button onClick={applyPreviewToRings} className="px-3 py-2 bg-green-700 rounded hover:bg-green-600">Apply</button>
                  <button onClick={cancelPreview} className="px-3 py-2 bg-slate-700 rounded hover:bg-slate-600">Cancel</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

/* ============================== Small UI helper ============================== */
function GotoRingForm({
  rows,
  cols,
  onGo,
}: {
  rows: number;
  cols: number;
  onGo: (row: number, col: number) => void;
}) {
  const [row, setRow] = useState(0);
  const [col, setCol] = useState(0);
  return (
    <div className="flex gap-2 mb-2">
      <input
        type="number"
        min={0}
        max={rows - 1}
        value={row}
        onChange={(e) => setRow(parseInt(e.target.value || "0"))}
        className="w-20 bg-slate-800 border border-slate-700 rounded p-1 text-xs"
        placeholder="row"
      />
      <input
        type="number"
        min={0}
        max={cols - 1}
        value={col}
        onChange={(e) => setCol(parseInt(e.target.value || "0"))}
        className="w-20 bg-slate-800 border border-slate-700 rounded p-1 text-xs"
        placeholder="col"
      />
      <button
        onClick={() => onGo(clamp(row, 0, rows - 1), clamp(col, 0, cols - 1))}
        className="px-2 py-1 bg-slate-700 rounded text-xs"
      >
        Go
      </button>
    </div>
  );
}